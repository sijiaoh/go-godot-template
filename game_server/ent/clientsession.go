// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sijiaoh/go-godot-template/api_server/ent/clientsession"
	"github.com/sijiaoh/go-godot-template/api_server/ent/user"
)

// ClientSession is the model entity for the ClientSession schema.
type ClientSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientSessionQuery when eager-loading is set.
	Edges                ClientSessionEdges `json:"edges"`
	user_client_sessions *int
	selectValues         sql.SelectValues
}

// ClientSessionEdges holds the relations/edges for other nodes in the graph.
type ClientSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClientSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientsession.FieldID:
			values[i] = new(sql.NullInt64)
		case clientsession.FieldToken:
			values[i] = new(sql.NullString)
		case clientsession.ForeignKeys[0]: // user_client_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientSession fields.
func (_m *ClientSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case clientsession.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case clientsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_client_sessions", value)
			} else if value.Valid {
				_m.user_client_sessions = new(int)
				*_m.user_client_sessions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClientSession.
// This includes values selected through modifiers, order, etc.
func (_m *ClientSession) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ClientSession entity.
func (_m *ClientSession) QueryUser() *UserQuery {
	return NewClientSessionClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this ClientSession.
// Note that you need to call ClientSession.Unwrap() before calling this method if this ClientSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ClientSession) Update() *ClientSessionUpdateOne {
	return NewClientSessionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ClientSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ClientSession) Unwrap() *ClientSession {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientSession is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ClientSession) String() string {
	var builder strings.Builder
	builder.WriteString("ClientSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteByte(')')
	return builder.String()
}

// ClientSessions is a parsable slice of ClientSession.
type ClientSessions []*ClientSession
