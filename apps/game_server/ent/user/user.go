// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeClientSessions holds the string denoting the client_sessions edge name in mutations.
	EdgeClientSessions = "client_sessions"
	// EdgeTransferCode holds the string denoting the transfer_code edge name in mutations.
	EdgeTransferCode = "transfer_code"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ClientSessionsTable is the table that holds the client_sessions relation/edge.
	ClientSessionsTable = "client_sessions"
	// ClientSessionsInverseTable is the table name for the ClientSession entity.
	// It exists in this package in order to avoid circular dependency with the "clientsession" package.
	ClientSessionsInverseTable = "client_sessions"
	// ClientSessionsColumn is the table column denoting the client_sessions relation/edge.
	ClientSessionsColumn = "user_client_sessions"
	// TransferCodeTable is the table that holds the transfer_code relation/edge.
	TransferCodeTable = "transfer_codes"
	// TransferCodeInverseTable is the table name for the TransferCode entity.
	// It exists in this package in order to avoid circular dependency with the "transfercode" package.
	TransferCodeInverseTable = "transfer_codes"
	// TransferCodeColumn is the table column denoting the transfer_code relation/edge.
	TransferCodeColumn = "user_transfer_code"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByClientSessionsCount orders the results by client_sessions count.
func ByClientSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClientSessionsStep(), opts...)
	}
}

// ByClientSessions orders the results by client_sessions terms.
func ByClientSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTransferCodeField orders the results by transfer_code field.
func ByTransferCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransferCodeStep(), sql.OrderByField(field, opts...))
	}
}
func newClientSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClientSessionsTable, ClientSessionsColumn),
	)
}
func newTransferCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransferCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TransferCodeTable, TransferCodeColumn),
	)
}
