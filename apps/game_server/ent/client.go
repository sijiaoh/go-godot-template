// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/sijiaoh/go-godot-template/game_server/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sijiaoh/go-godot-template/game_server/ent/clientsession"
	"github.com/sijiaoh/go-godot-template/game_server/ent/transfercode"
	"github.com/sijiaoh/go-godot-template/game_server/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ClientSession is the client for interacting with the ClientSession builders.
	ClientSession *ClientSessionClient
	// TransferCode is the client for interacting with the TransferCode builders.
	TransferCode *TransferCodeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ClientSession = NewClientSessionClient(c.config)
	c.TransferCode = NewTransferCodeClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		ClientSession: NewClientSessionClient(cfg),
		TransferCode:  NewTransferCodeClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		ClientSession: NewClientSessionClient(cfg),
		TransferCode:  NewTransferCodeClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ClientSession.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ClientSession.Use(hooks...)
	c.TransferCode.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ClientSession.Intercept(interceptors...)
	c.TransferCode.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ClientSessionMutation:
		return c.ClientSession.mutate(ctx, m)
	case *TransferCodeMutation:
		return c.TransferCode.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ClientSessionClient is a client for the ClientSession schema.
type ClientSessionClient struct {
	config
}

// NewClientSessionClient returns a client for the ClientSession from the given config.
func NewClientSessionClient(c config) *ClientSessionClient {
	return &ClientSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clientsession.Hooks(f(g(h())))`.
func (c *ClientSessionClient) Use(hooks ...Hook) {
	c.hooks.ClientSession = append(c.hooks.ClientSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clientsession.Intercept(f(g(h())))`.
func (c *ClientSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClientSession = append(c.inters.ClientSession, interceptors...)
}

// Create returns a builder for creating a ClientSession entity.
func (c *ClientSessionClient) Create() *ClientSessionCreate {
	mutation := newClientSessionMutation(c.config, OpCreate)
	return &ClientSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClientSession entities.
func (c *ClientSessionClient) CreateBulk(builders ...*ClientSessionCreate) *ClientSessionCreateBulk {
	return &ClientSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClientSessionClient) MapCreateBulk(slice any, setFunc func(*ClientSessionCreate, int)) *ClientSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClientSessionCreateBulk{err: fmt.Errorf("calling to ClientSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClientSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClientSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClientSession.
func (c *ClientSessionClient) Update() *ClientSessionUpdate {
	mutation := newClientSessionMutation(c.config, OpUpdate)
	return &ClientSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClientSessionClient) UpdateOne(_m *ClientSession) *ClientSessionUpdateOne {
	mutation := newClientSessionMutation(c.config, OpUpdateOne, withClientSession(_m))
	return &ClientSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClientSessionClient) UpdateOneID(id int) *ClientSessionUpdateOne {
	mutation := newClientSessionMutation(c.config, OpUpdateOne, withClientSessionID(id))
	return &ClientSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClientSession.
func (c *ClientSessionClient) Delete() *ClientSessionDelete {
	mutation := newClientSessionMutation(c.config, OpDelete)
	return &ClientSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClientSessionClient) DeleteOne(_m *ClientSession) *ClientSessionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClientSessionClient) DeleteOneID(id int) *ClientSessionDeleteOne {
	builder := c.Delete().Where(clientsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClientSessionDeleteOne{builder}
}

// Query returns a query builder for ClientSession.
func (c *ClientSessionClient) Query() *ClientSessionQuery {
	return &ClientSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClientSession},
		inters: c.Interceptors(),
	}
}

// Get returns a ClientSession entity by its id.
func (c *ClientSessionClient) Get(ctx context.Context, id int) (*ClientSession, error) {
	return c.Query().Where(clientsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClientSessionClient) GetX(ctx context.Context, id int) *ClientSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ClientSession.
func (c *ClientSessionClient) QueryUser(_m *ClientSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clientsession.Table, clientsession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clientsession.UserTable, clientsession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClientSessionClient) Hooks() []Hook {
	return c.hooks.ClientSession
}

// Interceptors returns the client interceptors.
func (c *ClientSessionClient) Interceptors() []Interceptor {
	return c.inters.ClientSession
}

func (c *ClientSessionClient) mutate(ctx context.Context, m *ClientSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClientSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClientSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClientSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClientSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ClientSession mutation op: %q", m.Op())
	}
}

// TransferCodeClient is a client for the TransferCode schema.
type TransferCodeClient struct {
	config
}

// NewTransferCodeClient returns a client for the TransferCode from the given config.
func NewTransferCodeClient(c config) *TransferCodeClient {
	return &TransferCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfercode.Hooks(f(g(h())))`.
func (c *TransferCodeClient) Use(hooks ...Hook) {
	c.hooks.TransferCode = append(c.hooks.TransferCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transfercode.Intercept(f(g(h())))`.
func (c *TransferCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.TransferCode = append(c.inters.TransferCode, interceptors...)
}

// Create returns a builder for creating a TransferCode entity.
func (c *TransferCodeClient) Create() *TransferCodeCreate {
	mutation := newTransferCodeMutation(c.config, OpCreate)
	return &TransferCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransferCode entities.
func (c *TransferCodeClient) CreateBulk(builders ...*TransferCodeCreate) *TransferCodeCreateBulk {
	return &TransferCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransferCodeClient) MapCreateBulk(slice any, setFunc func(*TransferCodeCreate, int)) *TransferCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransferCodeCreateBulk{err: fmt.Errorf("calling to TransferCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransferCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransferCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransferCode.
func (c *TransferCodeClient) Update() *TransferCodeUpdate {
	mutation := newTransferCodeMutation(c.config, OpUpdate)
	return &TransferCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferCodeClient) UpdateOne(_m *TransferCode) *TransferCodeUpdateOne {
	mutation := newTransferCodeMutation(c.config, OpUpdateOne, withTransferCode(_m))
	return &TransferCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferCodeClient) UpdateOneID(id int) *TransferCodeUpdateOne {
	mutation := newTransferCodeMutation(c.config, OpUpdateOne, withTransferCodeID(id))
	return &TransferCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransferCode.
func (c *TransferCodeClient) Delete() *TransferCodeDelete {
	mutation := newTransferCodeMutation(c.config, OpDelete)
	return &TransferCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferCodeClient) DeleteOne(_m *TransferCode) *TransferCodeDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferCodeClient) DeleteOneID(id int) *TransferCodeDeleteOne {
	builder := c.Delete().Where(transfercode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferCodeDeleteOne{builder}
}

// Query returns a query builder for TransferCode.
func (c *TransferCodeClient) Query() *TransferCodeQuery {
	return &TransferCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransferCode},
		inters: c.Interceptors(),
	}
}

// Get returns a TransferCode entity by its id.
func (c *TransferCodeClient) Get(ctx context.Context, id int) (*TransferCode, error) {
	return c.Query().Where(transfercode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferCodeClient) GetX(ctx context.Context, id int) *TransferCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a TransferCode.
func (c *TransferCodeClient) QueryUser(_m *TransferCode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transfercode.Table, transfercode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, transfercode.UserTable, transfercode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransferCodeClient) Hooks() []Hook {
	return c.hooks.TransferCode
}

// Interceptors returns the client interceptors.
func (c *TransferCodeClient) Interceptors() []Interceptor {
	return c.inters.TransferCode
}

func (c *TransferCodeClient) mutate(ctx context.Context, m *TransferCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TransferCode mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClientSessions queries the client_sessions edge of a User.
func (c *UserClient) QueryClientSessions(_m *User) *ClientSessionQuery {
	query := (&ClientSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(clientsession.Table, clientsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ClientSessionsTable, user.ClientSessionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransferCode queries the transfer_code edge of a User.
func (c *UserClient) QueryTransferCode(_m *User) *TransferCodeQuery {
	query := (&TransferCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transfercode.Table, transfercode.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.TransferCodeTable, user.TransferCodeColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ClientSession, TransferCode, User []ent.Hook
	}
	inters struct {
		ClientSession, TransferCode, User []ent.Interceptor
	}
)
